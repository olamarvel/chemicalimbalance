
import type { Report } from "@/types";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { FlaskConical, AlertTriangle, Bot, Clock, ChevronDown, ChevronUp, Share2, Download, Info } from "lucide-react";
import { formatDistanceToNow } from 'date-fns';
import { useState, useEffect } from 'react'; // Added useEffect
import { generateReportImage } from '@/lib/image-generator';
import { useToast } from "@/hooks/use-toast";
import { SupportModal } from "@/components/support-modal";

interface ReportSectionProps {
  report: Report;
  medicalConditions?: string;
}

export function ReportSection({ report, medicalConditions }: ReportSectionProps) {
  const { toast } = useToast();
  const timeAgo = formatDistanceToNow(new Date(report.timestamp), { addSuffix: true });
  const [isSideEffectsExpanded, setIsSideEffectsExpanded] = useState(false);
  const [isGeneratingImage, setIsGeneratingImage] = useState(false);
  const [imageDataUri, setImageDataUri] = useState<string | null>(null);
  const [canShare, setCanShare] = useState(false);
  const [isMounted, setIsMounted] = useState(false); // State to track mount status

  const SIDE_EFFECT_TRUNCATE_THRESHOLD = 5; // Show a few more initially

   // Use useEffect to set isMounted to true only on the client-side
  useEffect(() => {
    setIsMounted(true);
    // Check share capability only after mounting
    if (typeof navigator !== 'undefined' && navigator.share) {
       // Basic check, specific file check happens later
    }
  }, []);


  const handleShareReport = async () => {
    setIsGeneratingImage(true); // Show support modal immediately
    setImageDataUri(null); // Reset previous image data
    setCanShare(false); // Reset share readiness

    toast({
      title: "Generating Report Image...",
      description: "Please wait a moment while we create your shareable image. You can support the developer in the meantime!",
    });

    try {
      const imageDataUriValue = await generateReportImage(report, medicalConditions);
      setImageDataUri(imageDataUriValue);

      // Set a timeout to enable the share button after a delay, allowing modal content to be seen
      setTimeout(() => {
        setCanShare(true);
        toast({
          title: "Report Image Ready!",
          description: "Your shareable report image is now ready.",
        });
      }, 4000); // 4-second delay

    } catch (error) {
      console.error("Error generating report image:", error);
      handleSupportModalOpenChange(false); // Hide modal on generation error
      toast({
        variant: "destructive",
        title: "Error Generating Report",
        description: "Could not generate the report image. Please try again.",
      });
    }
  }

  const handleSupportModalOpenChange = (open: boolean) => {
    setIsGeneratingImage(open);
    if (!open) {
      // Reset states when modal is explicitly closed or implicitly via interaction
      setCanShare(false);
      setImageDataUri(null);
    }
  };

 const handleShareButtonClick = async (dataUri: string | null) => {
    if (!isMounted || !dataUri) { // Ensure component is mounted and data URI exists
      toast({
        variant: "destructive",
        title: "Error Sharing Report",
        description: "Report image not available or cannot share yet.",
      });
      return;
    }

    try {
      const fetchRes = await fetch(dataUri);
      const blob = await fetchRes.blob();
      const filename = `${report?.productName || report.drugName}-Report.png`;
      const imageFile = new File([blob], filename, { type: 'image/png' });
      const shareTitle = `${report?.productName || report.drugName} - Chemical Imbalance Report`;
      const shareText = `Check out this personalized report for ${report?.productName || report.drugName}. Generated by Chemical Imbalance.`;

      // Check Web Share API capability *with files*
      if (navigator.canShare && navigator.canShare({ files: [imageFile] })) {
        await navigator.share({
          title: shareTitle,
          text: shareText,
          files: [imageFile],
        });
        toast({
          title: "Report Shared!",
          description: "The report image has been sent to the share dialog.",
        });
      } else if (navigator.share) {
         // Fallback: Share URL if file sharing not supported but sharing exists
         await navigator.share({
             title: shareTitle,
             text: shareText,
             url: window.location.href, // Share the current page URL as fallback
         });
          toast({
            title: "Link Shared!",
            description: "Shared a link to the app as file sharing isn't supported.",
        });
      }
       else {
        // Fallback: Download image if Web Share API is not supported at all
        console.log("Web Share API not supported, falling back to download.");
        const link = document.createElement('a');
        link.download = filename;
        link.href = dataUri;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        toast({
          title: "Report Image Downloaded",
          description: "Web Share not supported. The report image has been downloaded.",
          action: (
            <Button variant="ghost" size="sm" onClick={() => window.open(dataUri, '_blank')}>
              <Download className="mr-2 h-4 w-4" />
              Open Image
            </Button>
          ),
        });
      }
    } catch (error) {
       if ((error as DOMException).name === 'AbortError') {
         // User cancelled the share operation
         toast({
           variant: "default",
           title: "Sharing Cancelled",
           description: "You cancelled the sharing process.",
         });
       } else {
         console.error("Error sharing report image:", error);
         toast({
           variant: "destructive",
           title: "Error Sharing Report",
           description: "Could not share the report image. The download fallback might have worked if sharing failed.",
         });
          // Attempt download as a last resort if sharing failed unexpectedly
          try {
              const link = document.createElement('a');
              const filename = `${report?.productName || report.drugName}-Report.png`;
              link.download = filename;
              link.href = dataUri;
              document.body.appendChild(link);
              link.click();
              document.body.removeChild(link);
              toast({
                  title: "Report Image Downloaded",
                  description: "Sharing failed, but the report image has been downloaded.",
               });
          } catch (downloadError) {
              console.error("Fallback download also failed:", downloadError)
          }
       }
     } finally {
       // Close the modal after sharing attempt (success, abort, or error)
       handleSupportModalOpenChange(false);
     }
   };


  return (
    <>
      <Card className="w-full shadow-lg animate-in fade-in-50 duration-500">
        <CardHeader className="flex flex-row items-start justify-between gap-4">
          <div className="flex-1">
             {/* Show Product Name if available, otherwise the original query */}
            <CardTitle className="text-3xl text-primary">
              {report.productName || report.drugName}
            </CardTitle>
             {/* Add NAFDAC No. if available */}
            {report.nafdacNo && (
                <p className="text-sm text-muted-foreground mt-1">
                    NAFDAC No: {report.nafdacNo}
                    {/* Show original query if it's different from product name */}
                    {report.productName && report.drugName !== report.productName && (
                        <span className="ml-2 text-xs">(Queried as: {report.drugName})</span>
                    )}
                </p>
            )}
            <CardDescription className="mt-1">Detailed analysis and personalized AI summary from NAFDAC, OpenFDA and AI.</CardDescription>
          </div>
          <Button
             variant="outline"
             size="icon"
             onClick={handleShareReport}
             aria-label="Share Report"
             disabled={isGeneratingImage || !isMounted} // Disable if generating or not mounted
             title={isMounted ? "Generate and Share Report" : "Share (disabled)"} // Tooltip
           >
            <Share2 className="h-5 w-5" />
          </Button>
        </CardHeader>
        <CardContent className="space-y-6">
          {medicalConditions && medicalConditions.trim() !== "" && (
            <>
              <div>
                <h3 className="text-xl font-semibold mb-2 text-primary flex items-center">
                   <Info className="mr-2 h-5 w-5"/>
                  Your Stated Conditions
                </h3>
                <p className="text-muted-foreground whitespace-pre-wrap">{medicalConditions}</p>
              </div>
              <Separator />
            </>
          )}
          <div>
            <h3 className="flex items-center text-xl font-semibold mb-2">
              <FlaskConical className="mr-2 h-5 w-5 text-primary" />
              Active Components
            </h3>
            {report.components.length > 0 ? (
              <div className="flex flex-wrap gap-2">
                {report.components.map((component) => (
                  <Badge key={component.name} variant="secondary" className="text-sm px-3 py-1">
                    {component.name}
                  </Badge>
                ))}
              </div>
            ) : (
              <p className="text-muted-foreground">No active components identified.</p>
            )}
          </div>

          <Separator />

          <div>
            <h3 className="flex items-center text-xl font-semibold mb-2">
              <AlertTriangle className="mr-2 h-5 w-5 text-destructive" />
              Potential Side Effects / Warnings
            </h3>
            {report.sideEffects.length > 0 ? (
              <div>
                {/* Ensure list doesn't have extra top margin */}
                <ul className={cn(
                  "list-disc list-inside space-y-2 text-muted-foreground relative overflow-hidden transition-all duration-300 ease-in-out",
                  isSideEffectsExpanded ? "max-h-[1000px]" : `max-h-[${SIDE_EFFECT_TRUNCATE_THRESHOLD * 2.5}rem]` // Adjust max-h based on items and line height
                )}>
                  {report.sideEffects.map((effectText, index) => (
                     // Use index as key for simplicity, ensure effects are stable if possible
                    <li key={index} className="whitespace-pre-wrap">
                      {effectText}
                    </li>
                  ))}
                   {/* Fade effect when collapsed */}
                  {!isSideEffectsExpanded && report.sideEffects.length > SIDE_EFFECT_TRUNCATE_THRESHOLD && (
                    <div className="absolute bottom-0 left-0 right-0 h-10 bg-gradient-to-t from-card via-card/90 to-transparent pointer-events-none" />
                  )}
                </ul>

                 {/* Toggle Button */}
                {report.sideEffects.length > SIDE_EFFECT_TRUNCATE_THRESHOLD && (
                  <Button
                    variant="link"
                    size="sm"
                    className="mt-1 px-0 text-sm text-primary hover:text-primary/80 flex items-center"
                    onClick={() => setIsSideEffectsExpanded(!isSideEffectsExpanded)}
                    aria-expanded={isSideEffectsExpanded}
                  >
                    {isSideEffectsExpanded ? "Show less" : `Show ${report.sideEffects.length - SIDE_EFFECT_TRUNCATE_THRESHOLD} more`}
                    {isSideEffectsExpanded ? (
                      <ChevronUp className="ml-1 h-4 w-4" />
                    ) : (
                      <ChevronDown className="ml-1 h-4 w-4" />
                    )}
                  </Button>
                )}
              </div>
            ) : (
              <p className="text-muted-foreground">
                No specific side effects or warnings information was found for the identified components via OpenFDA. Always consult official documentation or a healthcare professional.
              </p>
            )}
          </div>

          <Separator />

          <div>
            <h3 className="flex items-center text-xl font-semibold mb-2">
              <Bot className="mr-2 h-5 w-5 text-accent" />
              Personalized AI Summary & Warning
            </h3>
            <div className="p-4 bg-secondary/50 rounded-md prose prose-sm max-w-none text-foreground whitespace-pre-wrap">
              {report.aiSummary}
            </div>
          </div>
        </CardContent>
        <CardFooter className="text-xs text-muted-foreground flex justify-between items-center">
           <div>
             <Clock className="mr-1.5 h-3.5 w-3.5 inline-block" />
             Report generated {timeAgo}.
           </div>
           <span>Data sourced from NAFDAC & OpenFDA.</span>
        </CardFooter>
      </Card>
      <SupportModal
        isOpen={isGeneratingImage}
        onOpenChange={handleSupportModalOpenChange} // Use the handler function
        isImageGenerated={!!imageDataUri}
        canShare={canShare && isMounted} // Ensure mounted before enabling share
        onShareButtonClick={() => handleShareButtonClick(imageDataUri)}
      />
    </>
  );
}

